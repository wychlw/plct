tinymembench v0.4.9-nuumio (simple benchmark for memory throughput and latency)

CFLAGS: -O2
bandwidth test min repeats (-b): 3
bandwidth test max repeats (-B): 10
bandwidth test mem realloc (-M): no      (-m for realloc)
      latency test repeats (-l): 10
        latency test count (-c): 10000000

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Test result is the best of repeated runs. Number of repeats  ==
==         is shown in brackets                                         ==
== Note 3: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 4: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 5: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                 :   3636.8 MB/s (10, 29.4%)
 C copy backwards (32 byte blocks)                :   1298.6 MB/s (10, 0.2%)
 C copy backwards (64 byte blocks)                :   1171.7 MB/s (10, 0.5%)
 C copy                                           :   2971.3 MB/s (3)
 C copy prefetched (32 bytes step)                :   2973.8 MB/s (3)
 C copy prefetched (64 bytes step)                :   2973.4 MB/s (3)
 C 2-pass copy                                    :   2754.1 MB/s (3)
 C 2-pass copy prefetched (32 bytes step)         :   2762.2 MB/s (3)
 C 2-pass copy prefetched (64 bytes step)         :   2762.1 MB/s (3)
 C scan 8                                         :    664.1 MB/s (3)
 C scan 16                                        :    996.2 MB/s (10, 0.2%)
 C scan 32                                        :   1991.7 MB/s (3)
 C scan 64                                        :   5269.0 MB/s (3)
 C fill                                           :   6226.7 MB/s (10, 0.3%)
 C fill (shuffle within 16 byte blocks)           :   6256.2 MB/s (10, 0.2%)
 C fill (shuffle within 32 byte blocks)           :   1399.6 MB/s (3)
 C fill (shuffle within 64 byte blocks)           :   1399.7 MB/s (3)
 ---
 libc memcpy copy                                 :   2979.6 MB/s (3)
 libc memchr scan                                 :   4958.8 MB/s (10, 0.1%)
 libc memset fill                                 :   6211.3 MB/s (10, 0.3%)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    0.0 ns          /     0.0 ns 
    131072 :    7.9 ns          /    12.2 ns 
    262144 :   11.8 ns          /    16.0 ns 
    524288 :   13.8 ns          /    17.3 ns 
   1048576 :   21.2 ns          /    29.3 ns 
   2097152 :   62.3 ns          /    94.4 ns 
   4194304 :   81.3 ns          /   111.9 ns 
   8388608 :  124.6 ns          /   166.3 ns 
  16777216 :  153.3 ns          /   197.6 ns 
  33554432 :  178.9 ns          /   224.6 ns 
  67108864 :  202.0 ns          /   250.5 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    0.0 ns          /     0.0 ns 
    131072 :    9.2 ns          /    14.1 ns 
    262144 :   13.9 ns          /    18.9 ns 
    524288 :   16.3 ns          /    20.9 ns 
   1048576 :   19.0 ns          /    24.2 ns 
   2097152 :   61.5 ns          /    91.3 ns 
   4194304 :   77.2 ns          /   104.0 ns 
   8388608 :   96.1 ns          /   125.2 ns 
  16777216 :  117.9 ns          /   150.9 ns 
  33554432 :  142.5 ns          /   175.2 ns 
  67108864 :  163.1 ns          /   190.0 ns 
